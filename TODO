-form validation failures/errors (entry forms)
-change alloc settings, save settings with alloc
-collective equity account
-amount trigger delayed disbursals
-more jquery plugin controls
-store snapshot of config with it
-get automated export working again
-filter deactivated members, accounts
-add account
-automate test w/travis
-document hosted release, refresh method
-req, spec wiki (github)
-basic user manual, dev manual
-dep inj with reader monad
-robust error handling
-detailed debug,info logging
-rationalize naming for services, templates
-use template params to inject more config and data info
-migrate to angular
-apply info vis toolkit
-load test, more detailed
-orm survey
-use slicker haskell/js solution, plus cooler js libs
-tighter db constraints with checks, uniques
-meta data for (service -> url) or remove named service functions
-improve selection of libraries used
-period picker shift over time
-conn pool?
-decimal places
-buy in action populate w/accept date
-performance, memory measure
-project financial health, dev health, dsi financial health status
--------------------









release/refresh - (config files??)
  dev->: 
    -checkout, clean build
    -restore prod backup
    -run db migrate, start
    -tag last commit
  ->prod:
    -backup db
    -stash config changes, checkout, unstash
    -build only (cabal configure; cabal build)
    -stop (bin/stop.sh)
    -run db migrate (bin/db-update.sh), manual migration if needed
    -(rm ~capa/dev/capa/state/Globals/*)
    -build/install  (as root, cabal install)
    -fetch js packages (./fetch-js-libs.sh)
    -remove nohup (rm nohup.out)
    -start (as root, bin/start.sh)
    -chmod 777 nohup.out
      

  prod->:
    -backup db
  ->dev:
    -restore db
    -run db migrate, start

remote support
   -bug description, post to github or reddit. screenshots, times, data helpful
   -contact user, setup screenshare
   -get screenshots, details on when happened, what data

dev manual (most custom, specific to more general)
   -haskell main libraires
   -haskell peripheral libraries
   -haskell advanced concepts
   -haskell general
   -javascript libraries, plugins
   -javascript core
   -postgres dev
   -postgres admin
   -monitoring usage
   -protocols, references
   -build procedure
   -design paradigms
   -admin section for remote support
   -pieces that need upgrading: ...

user manual (core, frequent steps to less frequent)
   -references
   -screen shots + descriptions
